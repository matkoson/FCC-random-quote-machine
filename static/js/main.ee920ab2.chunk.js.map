{"version":3,"sources":["assets/TUMBLR.svg","App.js","serviceWorker.js","index.js","assets/TWITTER.svg","assets/QUOTE.svg"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quoteText","quoteSignature","counter","API","currentStyling","currentStylingIndex","handleButtonClick","bind","assertThisInitialized","axios","get","quotes","data","setState","quotesBase","console","log","length","nxtQuote","content","title","react_default","a","createElement","id","className","concat","src","quotesLogo","alt","tumblrLogo","href","twitterLogo","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee920ab2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TUMBLR.11e6746e.svg\";","import React, { Component } from \"react\";\nimport \"./App.sass\";\nimport tumblrLogo from \"./assets/TUMBLR.svg\";\nimport twitterLogo from \"./assets/TWITTER.svg\";\nimport quotesLogo from \"./assets/QUOTE.svg\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteText: \"Quality means doing it right when no one is looking.\",\n      quoteSignature: \"Henry Ford\",\n      counter: 1,\n      API: false,\n      currentStyling: [\"orange-styling\", \"red-styling\", \"blue-styling\"],\n      currentStylingIndex: 0\n    };\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n  async componentDidMount() {\n    let quotes = await axios.get(\n      \"http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=10&callback=\"\n    );\n    quotes = quotes.data;\n    this.setState({ quotesBase: quotes });\n    console.log(this.state);\n    console.log(this.state.quotesBase.length);\n  }\n  handleButtonClick() {\n    let nxtQuote = this.state.quotesBase[this.state.counter];\n    this.setState({\n      API: true,\n      quoteText: nxtQuote.content,\n      quoteSignature: nxtQuote.title,\n      counter: (this.state.counter + 1) % this.state.quotesBase.length,\n      currentStylingIndex:\n        (this.state.currentStylingIndex + 1) % this.state.currentStyling.length\n    });\n  }\n  render() {\n    return this.state.API ? (\n      <div\n        id=\"quote-box\"\n        className={`App ${\n          this.state.currentStyling[this.state.currentStylingIndex]\n        }`}\n      >\n        <div className=\"App__quote\">\n          <div className=\"App__top\">\n            <div id=\"text\" className=\"App__txt-svg\">\n              <div className=\"App__top__svg\">\n                <img src={quotesLogo} alt=\"quotes icon\" />\n              </div>\n              {this.state.quoteText}\n            </div>\n            <div id=\"author\" className=\"App__quote__signature\">\n              - {this.state.quoteSignature}\n            </div>\n          </div>\n          <div className=\"App__bottom\">\n            <div className=\"App__logos\">\n              <div className=\"App__bottom__svg\">\n                <img src={tumblrLogo} alt=\"tumblr icon\" />\n              </div>\n              <div className=\"App__bottom__svg\">\n                <a\n                  id=\"tweet-quote\"\n                  href=\"twitter.com/intent/tweet\"\n                  className=\"App__bottom__svg\"\n                >\n                  <img src={twitterLogo} alt=\"twitter icon\" />\n                </a>\n              </div>\n            </div>\n            <div className=\"App__newQuoteBtn\">\n              <button\n                id=\"new-quote\"\n                className={`${\n                  this.state.currentStyling[this.state.currentStylingIndex]\n                }`}\n                onClick={this.handleButtonClick}\n              >\n                New quote\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div\n        className={`App ${\n          this.state.currentStyling[this.state.currentStylingIndex]\n        }`}\n      >\n        <div id=\"quote-box\" className=\"App__quote\">\n          <div className=\"App__top\">\n            <div className=\"App__txt-svg\">\n              <div className=\"App__top__svg\">\n                <img src={quotesLogo} alt=\"quotes icon\" />\n              </div>\n              <div id=\"text\" className=\"App__quote__text\">\n                {this.state.quoteText}\n              </div>\n            </div>\n            <div id=\"author\" className=\"App__quote__signature\">\n              - {this.state.quoteSignature}\n            </div>\n          </div>\n          <div className=\"App__bottom\">\n            <div className=\"App__logos\">\n              <img src={tumblrLogo} alt=\"tumblr icon\" />\n              <a\n                id=\"tweet-quote\"\n                href=\"twitter.com/intent/tweet\"\n                className=\"App__bottom__svg\"\n              >\n                <img src={twitterLogo} alt=\"twitter icon\" />\n              </a>\n            </div>\n            <div className=\"App__newQuoteBtn\">\n              <button\n                id=\"new-quote\"\n                className={`${\n                  this.state.currentStyling[this.state.currentStylingIndex]\n                }`}\n                onClick={this.handleButtonClick}\n              >\n                New quote\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/TWITTER.9333cfa9.svg\";","module.exports = __webpack_public_path__ + \"static/media/QUOTE.9b43492b.svg\";"],"sourceRoot":""}